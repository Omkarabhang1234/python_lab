{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bb7632b0-6a95-4ace-875b-d68c6b5d391a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    }
   ],
   "source": [
    "#write a program to length of string\n",
    "str=\"omkarabhang\"\n",
    "x=len(str)\n",
    "print(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "31fdd3a7-6206-479c-821c-26a01b0a87e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the string: omkar\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "occurence of character\n",
      " 'o':3\n",
      " 'm':3\n",
      " 'k':2\n",
      " 'a':4\n",
      " 'r':2\n",
      " 'b':1\n",
      " 'h':1\n",
      " 'n':1\n",
      " 'g':1\n"
     ]
    }
   ],
   "source": [
    "#write a python program to count the number of characters(characters frequaency in a string)\n",
    "string=input(\"enter the string:\")\n",
    "for char in string:\n",
    "   if char in char_count:\n",
    "       char_count[char]+=1\n",
    "   else:\n",
    "       char_count[char]=1\n",
    "print(\"occurence of character\")\n",
    "for char in char_count:\n",
    "    print(F\" '{char}':{char_count[char]}\")\n",
    "     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "8857899c-8ea7-4e3d-af1a-7799b1a43683",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the string:  omkarabhang\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Occurrence of characters:\n",
      " 'o': 5\n",
      " 'm': 5\n",
      " 'k': 4\n",
      " 'a': 8\n",
      " 'r': 4\n",
      " 'b': 2\n",
      " 'h': 2\n",
      " 'n': 2\n",
      " 'g': 2\n"
     ]
    }
   ],
   "source": [
    "#write a python program to count the number of characters(characters frequaency in a string)\n",
    "string = input(\"Enter the string: \")\n",
    "\n",
    "for char in string:\n",
    "    if char in char_count:\n",
    "        char_count[char] += 1\n",
    "    else:\n",
    "        char_count[char] =1\n",
    "print(\"Occurrence of characters:\")\n",
    "for char in char_count:\n",
    "    print(f\" '{char}': {char_count[char]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "809daaaa-bc6d-4ec9-a9fb-14b5c54fb7b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the string to search for:  banana\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'banana' found at index 1.\n"
     ]
    }
   ],
   "source": [
    "#write a python program to perform the binary search using string\n",
    "def binary_search(strings, target):\n",
    "    left, right = 0, len(strings) - 1\n",
    "\n",
    "    while left <= right:\n",
    "        mid = (left + right) // 2\n",
    "        mid_value = strings[mid]\n",
    "\n",
    "        if mid_value < target:\n",
    "            left = mid + 1\n",
    "        elif mid_value > target:\n",
    "            right = mid - 1\n",
    "        else:\n",
    "            return mid \n",
    "\n",
    "    return -1  \n",
    "\n",
    "# Sample sorted list of strings\n",
    "sorted_strings = [\"apple\", \"banana\", \"cherry\", \"orange\", \"mango\", \"grape\", \"kiwi\"]\n",
    "\n",
    "# Input from the user\n",
    "target_string = input(\"Enter the string to search for: \")\n",
    "\n",
    "# Perform binary search\n",
    "index = binary_search(sorted_strings, target_string)\n",
    "\n",
    "if index != -1:\n",
    "    print(f\"'{target_string}' found at index {index}.\")\n",
    "else:\n",
    "    print(f\"'{target_string}' not found in the list.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "e4e58c62-d38f-49c5-b8f7-edc30ca12216",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the string to search for:  grape\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "'grape' found at index 5.\n"
     ]
    }
   ],
   "source": [
    "#write a python program to perform the linear search using string\n",
    "def linear_search(strings, target):\n",
    "    for index, value in enumerate(strings):\n",
    "        if value == target:\n",
    "            return index  \n",
    "    return -1  \n",
    "\n",
    "# Sample list of strings\n",
    "strings_list = [\"apple\", \"banana\", \"cherry\", \"orange\", \"mango\", \"grape\", \"kiwi\"]\n",
    "\n",
    "# Input from the user\n",
    "target_string = input(\"Enter the string to search for: \")\n",
    "\n",
    "# Perform linear search\n",
    "index = linear_search(strings_list, target_string)\n",
    "\n",
    "if index != -1:\n",
    "    print(f\"'{target_string}' found at index {index}.\")\n",
    "else:\n",
    "    print(f\"'{target_string}' not found in the list.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cf0df8b2-3e76-4ddb-88a5-3da1b5f0b005",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ea83413-4057-48c2-8e5d-f15efc4f5b04",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
